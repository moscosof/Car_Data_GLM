+ geom_bar()
+ geom_text(stat='bin', aes(label=...count...),size=500)
ggplot(diamonds_mp_by_clarity, aes(y=diamonds_mp_by_clarity$mean_price))
+ geom_bar()
+ geom_text(stat='bin')
ggplot(diamonds_mp_by_clarity, aes(y=diamonds_mp_by_clarity$mean_price))
+ geom_bar()
+ geom_text()
ggplot(diamonds_mp_by_clarity, aes(y=diamonds_mp_by_clarity$mean_price))
+ geom_bar()
ggplot(diamonds_mp_by_clarity, aes(y=diamonds_mp_by_clarity$mean_price))
ggplot(diamonds_mp_by_clarity, aes(y=diamonds_mp_by_clarity$mean_price))
+ geom_bar()
ggplot(diamonds_mp_by_clarity, aes(y=diamonds_mp_by_clarity$mean_price))
+ geom_line()
ggplot(diamonds_mp_by_clarity, aes(y=diamonds_mp_by_clarity$mean_price))
+ geom_bar()
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
diamonds_mp_by_color
p1 <- ggplot(diamonds_mp_by_clarity$mean_price)
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
g1 = ggplotGrob(p1)
library(gtable)
g1 = ggplotGrob(p1)
library(gtable)
g1 = ggplotGrob(p1)
g1 = ggplotGrob(p2)
p1 <- ggplot(diamonds_mp_by_clarity, aes(y=diamonds_mp_by_clarity$mean_price))
+ geom_bar()
g1 = ggplotGrob(p1)
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
g1 = ggplotGrob(p1)
g1 = ggplotGrob(p2)
g=cbind(g1,g2,size="first")
g=cbind(p1,p2,size="first")
g1 = ggplotGrob(p1)
p1 <- ggplot(diamonds_mp_by_clarity, aes(y=diamonds_mp_by_clarity$mean_price))
+ geom_bar()
ggplot(diamonds_mp_by_clarity, aes(x=mean_price))
+ geom_bar()
ggplot(diamonds_mp_by_clarity, aes(mean_price))
+ geom_bar()
ggplot(diamonds_mp_by_clarity, aes(mean_price))
+ geom_bar()
iamonds_mp_by_clarity
iamonds_mp_by_clarity
diamonds_mp_by_clarity
mean_price
ggplot(diamonds_mp_by_color, aes(mean_price))
+ geom_bar()
ggplot(diamonds_mp_by_color, aes(mean_price))
+ geom_bar()
ggplot(diamonds_mp_by_color, aes(y=mean_price))
+ geom_bar()
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
diamonds_mp_by_clarity$mean_price)
diamonds_mp_by_clarity$mean_price
diamonds_mp_by_clarity$mean_price
p2 <- barplot(diamonds_mp_by_color$mean_price)
grid.arrange(p1,p2,ncol=2)
grid.arrange(p1,p2,ncol=2)
ggplotGrob(p1)
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
g = cbind(p1,p2)
diamonds_mp_by_clarity
p1 = ggplot(diamonds_mp_by_clarity, aes(x=clarity) + geom_bar
p2 <- barplot(diamonds_mp_by_color$mean_price)
p1 = ggplot(diamonds_mp_by_clarity, aes(x=clarity) + geom_bar()
barplot(diamonds_mp_by_color$mean_price)
p1 = ggplot(diamonds_mp_by_clarity, aes(x=clarity)) + geom_bar()
p1
p1 = ggplot(diamonds_mp_by_clarity, aes(x=clarity)) + geom_bar()
+ ylim(0,5000)
p1 = ggplot(diamonds_mp_by_clarity, aes(x=clarity)) + geom_bar() + ylim(5000)
p1
ggplot(diamonds_mp_by_clarity, aes(x=clarity)) + geom_bar() + ylim(5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity)) + geom_bar() +
ylim(0,5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar() +
+  ylim(0,5000)
+ geom_text(stat = 'bin')
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar() +
+  ylim(0,5000)
+ geom_text(stat = 'bin', aes(label=..count..)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar() +
+  ylim(0,5000)
+ geom_text(stat = 'bin', aes(label=..count..,size =5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar() +
+  ylim(0,5000)
+ geom_text(stat = 'bin', aes(label=..count..,size =5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar() +
+  ylim(0,5000)
+ geom_text(stat = 'bin', aes(label=..count..,size =5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar() +
+  ylim(0,5000)
+ geom_text(stat = 'bin', aes(label=..count..,size =5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar() +
+  ylim(0,5000)
+ geom_text(stat = 'bin', aes(label=..count)..,size =5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar() +
+  ylim(0,5000)
+ geom_text(stat='bin',aes(label=..count..),size =5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar() +
+  ylim(0,5000)
+ geom_text(stat='bin',aes(label=..count..),size=5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar() +
+  ylim(0,5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar()
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar(position="stack")
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar(position="stack")
+  ylim(0,5000)
ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar(position="stack")
p1 = ggplot(diamonds_mp_by_clarity, aes(x=clarity))
+ geom_bar(position="stack", binwidth=5 )
p2 <- barplot(diamonds_mp_by_color$mean_price)
library(ggplot2)
library(gridExtra)
library(dplyr)
data("diamonds")
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
grid.arrange(p1,p2,ncol=2)
library(gridExtra)
grid.arrange(p1,p2,ncol=2)
diamonds_mp_by_clarity
barplot(diamonds_mp_by_clarity$clarity,diamonds_mp_by_clarity$mean_price)
barplot(diamonds_mp_by_clarity$clarity,diamonds_mp_by_clarity$mean_price, horizon=TRUE)
barplot(diamonds_mp_by_clarity$mean_price, diamonds_mp_by_clarity$clarity)
barplot(diamonds_mp_by_clarity$mean_price, diamonds_mp_by_clarity$clarity, las=1)
barplot(diamonds_mp_by_clarity$clarity, diamonds_mp_by_clarity$mean_price)
diamonds_mp_by_clarity$mean_price
diamonds_mp_by_clarity$clarity
barplot(diamonds_mp_by_clarity$clarity, diamonds_mp_by_clarity$mean_price)
barplot(diamonds_mp_by_clarity$mean_price,
names.diamonds_mp_by_clarity$clarity)
diamonds_mp_by_clarity$clarity
factor(diamonds_mp_by_clarity$clarity)
levels(diamonds_by_clarity$clarity)
barplot(diamonds_mp_by_clarity$mean_price,
levels(diamonds_mp_by_clarity$clarity))
(diamonds_mp_by_clarity$mean_price,
factor(diamonds_mp_by_clarity$clarity))
factor(diamonds_mp_by_clarity$clarity)
diamonds_mp_by_clarity$clarity = factor(diamonds_mp_by_clarity$clarity)
diamonds_mp_by_clarity$clarity
barplot(diamonds_mp_by_clarity$mean_price,
diamonds_mp_by_clarity$clarity)
p1 <- barplot(diamonds_mp_by_clarity$clarity,diamonds_mp_by_clarity$mean_price)
tempo <- diamonds_mp_by_clarity$mean_price
barplot(diamonds_mp_by_clarity$clarity,
tempo)
barplot(diamonds_mp_by_clarity$clarity,
tempo, las=1)
library(ggplot2)
library(gridExtra)
library(dplyr)
data("diamonds")
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_mp_by_clarity
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
diamonds_mp_by_color
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
p2 <- barplot(diamonds_mp_by_color$mean_price)
grid.arrange(p1,p2,ncol=2)
library(lattice)
grid.arrange(p1,p2,ncol=2)
p2 <- barplot(diamonds_mp_by_color$mean_price)
p1 <- barplot(diamonds_mp_by_clarity$mean_price)
grid.arrange(p1,p2,ncol=2)
library(grid)
grid.arrange(p1,p2,ncol=2)
grid.arrange(p1,p2,ncol=1)
g1 <-rectGrob(p1)
g1
g1 <-rectGrob(p1)
g2 <-rectGrob(p2)
g2
grid.arrange(p1,p2,ncol=1)
grid.arrange(g1,g2,ncol=1)
p1
barplot(diamonds_mp_by_clarity$mean_price)
rquery.cormat(M, type="flatten", graph=FALSE)
rquery.cormat<-function(x,
type=c('lower', 'upper', 'full', 'flatten'),
graph=TRUE,
graphType=c("correlogram", "heatmap"),
col=NULL, ...)
{
library(corrplot)
# Helper functions
#+++++++++++++++++
# Compute the matrix of correlation p-values
cor.pmat <- function(x, ...) {
mat <- as.matrix(x)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# Get lower triangle of the matrix
getLower.tri<-function(mat){
upper<-mat
upper[upper.tri(mat)]<-""
mat<-as.data.frame(upper)
mat
}
# Get upper triangle of the matrix
getUpper.tri<-function(mat){
lt<-mat
lt[lower.tri(mat)]<-""
mat<-as.data.frame(lt)
mat
}
# Get flatten matrix
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
# Define color
if (is.null(col)) {
col <- colorRampPalette(
c("#67001F", "#B2182B", "#D6604D", "#F4A582",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#4393C3", "#2166AC", "#053061"))(200)
col<-rev(col)
}
# Correlation matrix
cormat<-signif(cor(x, use = "complete.obs", ...),2)
pmat<-signif(cor.pmat(x, ...),2)
# Reorder correlation matrix
ord<-corrMatOrder(cormat, order="hclust")
cormat<-cormat[ord, ord]
pmat<-pmat[ord, ord]
# Replace correlation coeff by symbols
sym<-symnum(cormat, abbr.colnames=FALSE)
# Correlogram
if(graph & graphType[1]=="correlogram"){
corrplot(cormat, type=ifelse(type[1]=="flatten", "lower", type[1]),
tl.col="black", tl.srt=45,col=col,...)
}
else if(graphType[1]=="heatmap")
heatmap(cormat, col=col, symm=TRUE)
# Get lower/upper triangle
if(type[1]=="lower"){
cormat<-getLower.tri(cormat)
pmat<-getLower.tri(pmat)
}
else if(type[1]=="upper"){
cormat<-getUpper.tri(cormat)
pmat<-getUpper.tri(pmat)
sym=t(sym)
}
else if(type[1]=="flatten"){
cormat<-flattenCorrMatrix(cormat, pmat)
pmat=NULL
sym=NULL
}
list(r=cormat, p=pmat, sym=sym)
}
library(MASS)
set.seed(25) #set seed (just in case)
manage_na <- function(tempo)
{
for(i in 1:ncol(tempo))
{
if(is.numeric(tempo[,i]))
{
tempo[is.na(tempo[,i]),i] <- median(tempo[!is.na(tempo[,i]),i])
}
}
tempo
}
tempo <- train
tra_clean <- manage_na(tempo[,-c(1,3,128)])
M <-cor(tra_clean)
rquery.cormat(M, type="flatten", graph=FALSE)
tempo[,-c(1,3,128)]
manage_na <- function(tempo)
{
for(i in 1:ncol(tempo))
{
if(is.numeric(tempo[,i]))
{
tempo[is.na(tempo[,i]),i] <- median(tempo[!is.na(tempo[,i]),i])
}
}
tempo
}
ValProcess <- train
tra_clean <- manage_na(ValProcess[,-c(1,3,128)])
View(tra_clean)
M <-cor(tra_clean)
View(M)
rquery.cormat(M, type="flatten", graph=FALSE)
symnum(M, abbr.colnames=FALSE)
rquery.cormat(M, type="flatten", graph=FALSE)
ValTemp <- rquery.cormat(M, type="flatten", graph=FALSE)
ValTemp <-  symnum(M, abbr.colnames=FALSE)
str(ValTemp)
nrow(ValTemp)
nrow(ValTemp)
ValTemp[,]
ValTemp[,1]
ValTemp[1,1]
ValTemp[2,1]
ValTemp[2,2]
ValTemp[2,3]
ValTemp[3,1]
ValTemp[1,]
ValTemp[3,1]
ValTemp[2,]
ValTemp[3,]
View(M)
M <- M[1:5,1:5]
ValTemp <- rquery.cormat(M, type="upper", graph=FALSE)
ValTemp <- rquery.cormat(M, type="flatten", graph=FALSE)
ValTemp
M <- M[1:2,1:2]
ValTemp <- rquery.cormat(M, type="flatten", graph=FALSE)
M <- M[1:5,1:5]
M <-cor(tra_clean)
ValTemp <- rquery.cormat(M, type="flatten", graph=FALSE)
tra_clean <- manage_na(ValProcess[,-c(1,3,128)])
M <-cor(tra_clean)
head(round(M,2))
M
ValTemp <- rquery.cormat(M, type="flatten", graph=FALSE)
rquery.cormat(M, type="flatten", graph=FALSE)
valTemp <- as.matrix(valTemp)
valTemp <- as.matrix(valTemp)
valTemp <- as.matrix(valTemp)
valTemp
ValTemp <- rquery.cormat(M, type="flatten", graph=FALSE)
ValTemp
valTemp <- as.matrix(valTemp)
str(ValTemp)
valTemp$r
valTemp <- as.matrix(valTemp)
valTemp <- as.vector(valTemp)
valTemp$r
M$r
valTemp <- as.vector(valTemp)
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
X <- data.frame(bad=1:3, worse=rnorm(3))
X
colnames(X) <- c("good", "better")
X
X
colnames(X)[2] <- "superduper"
X
logisticModel <- glm(rating!='unacc' ~ buying + maintenance + persons + lug_boot + safety, family=binomial(link = "logit"),data=train)
library(dplyr)
setwd("~/SprintboardProject/CarData_LogisticRegression")
train <- read.csv("CarData.csv",
col.names=c('buying','maintenance','doors','persons','lug_boot','safety','rating'))
str(train)
logisticModel <- glm(rating!='unacc' ~ buying + maintenance + persons + lug_boot + safety, family=binomial(link = "logit"),data=train)
summary(logisticModel)
redictRating = predict(logisticModel, type = "response")
predictRating = predict(logisticModel, type = "response")
predictRating[1673]
predictRating[947]
predictRating[1648]
summary(predictRating)
table(train$rating, predictRating >= 0.5)
tapply(predictRating,train$rating,mean)
logisticModel <- glm(rating!='unacc' ~ buying + persons + lug_boot + safety, family=binomial(link = "logit"),data=train)
summary(logisticModel)
predictRating = predict(logisticModel, type = "response")
summary(predictRating)
table(train$rating, predictRating >= 0.5)
(logisticModel,type='link')
(logisticModel,type='link')
val1 <- (logisticModel,type='link')
val1 <- (logisticModel,type='link')
val1 <- predict(logisticModel,type='link')
val1
View(train)
View(train)
logisticModel <- glm(rating!='unacc' ~ buying + maintenance + doors + persons + lug_boot + safety, family=binomial(link = "logit"),data=train)
summary(logisticModel)
predictRating = predict(logisticModel, type = "response")
summary(predictRating)
table(train$rating, predictRating >= 0.5)
tapply(predictRating,train$rating,mean)
train  %>% group_by(rating) %>% summarise(val=n())
val1 <- predict(logisticModel,type='link')
val1
train
val1 <- predict(logisticModel,type='link')
val1
View(train)
View(train)
head(modelPred)
modelPred[1]
modelPred
modelPred
modelPred <- predict(logisticModel,type='link')
modelPred[1]
densityplot( ~modelPred,
data=train,
main="Logistic Model Density Plot",
xlab="predict(logisticModel,type='link')")
densityplot( ~modelPred,
data=train,
main="Logistic Model Density Plot",
xlab="predict(logisticModel,type='link')")
library(lattice)
densityplot( ~modelPred,
data=train,
main="Logistic Model Density Plot",
xlab="predict(logisticModel,type='link')")
summary(modelPred)
densityplot( ~CarData$rating!='unacc',
data=train,
main="Logistic Model Density Plot",
xlab="predict(logisticModel,type='link')")
densityplot( ~CarData$rating!='unacc',
data=train,
main="Logistic Model Density Plot",
xlab="predict(logisticModel,type='link')")
densityplot( ~modelPred,
data=train,
main="Logistic Model Density Plot",
xlab="predict(logisticModel,type='link')")
densityplot( ~modelPred,
data=train,
main="Logistic Model Density Plot",
xlab="predict(logisticModel,type='link')")
train  %>% group_by(rating) %>% summarise(val=n())
train  %>% group_by(rating)
groups=CarData$rating!='unacc'
summary(modelPred)
#Predit values for all the 1727 records.
predictRating = predict(logisticModel, type = "response")
#Checking some entries
predictRating[1673]
predictRating[947]
predictRating[1648]
summary(predictRating)
table(train$rating, predictRating >= 0.5)
tapply(predictRating,train$rating,mean)
train  %>% group_by(rating) %>% summarise(val=n())
val1 <- predict(logisticModel,type='link')
val1
densityplot( ~modelPred,
data=train,
main="Logistic Model Density Plot",
xlab="predict(logisticModel,type='link')")
